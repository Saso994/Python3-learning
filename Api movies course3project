#Course 3 Python Project 

import requests_with_caching
import json

# Define a function, called get_movies_from_tastedive. It should take one input parameter, 
# a string that is the name of a movie or music artist. The function should return the 5 TasteDive results that are associated with that string; 
# be sure to only get movies, not other kinds of media. It will be a python dictionary with just one key, ‘Similar’.
# function 1
def get_movies_from_tastedive(movie):
    parameters = {'q':movie, 'type':'movies', 'limit':5}
    out = requests_with_caching.get('https://tastedive.com/api/similar',params = parameters)
    js = out.json()
    return js

# Please copy the completed function from above into this active code window. Next, you will need to write a function 
# that extracts just the list of movie titles from a dictionary returned by get_movies_from_tastedive. Call it extract_movie_titles.
# function 2
def extract_movie_titles(js):
    titles = [k['Name'] for k in js['Similar']['Results']]
    return list(titles)

# Please copy the completed functions from the two code windows above into this active code window. 
# Next, you’ll write a function, called get_related_titles. It takes a list of movie titles as input. 
# It gets five related movies for each from TasteDive, extracts the titles for all of them, and combines them all into a single list. Don’t include the same movie twice.
# function 3
def get_related_titles(movie_names):
    movi_list = []
    movie_titles=[extract_movie_titles(get_movies_from_tastedive(movie)) for movie in movie_names]
    for movie in movie_titles:
            for m in movie:
                if m not in movi_list:
                    movi_list.append(m)
    return movi_list

# Your next task will be to fetch data from OMDB. The documentation for the API is at https://www.omdbapi.com/
# Define a function called get_movie_data. It takes in one parameter which is a string that should represent the title of a movie you want to search. 
# The function should return a dictionary with information about that movie.
# Again, use requests_with_caching.get(). For the queries on movies that are already in the cache, you won’t need an api key.
# You will need to provide the following keys: t and r. As with the TasteDive cache, be sure to only include those two parameters in order to extract existing data from the cache.    
# function 4
def get_movie_data (movie) :
    base_url = "http://www.omdbapi.com/"
    parameters = {}
    parameters['t'] = movie
    parameters['r'] = 'json'
    data = requests_with_caching.get(base_url, params=parameters)
    js= data.json()
    return js

# Please copy the completed function from above into this active code window. Now write a function called get_movie_rating. 
# It takes an OMDB dictionary result for one movie and extracts the Rotten Tomatoes rating as an integer. 
# For example, if given the OMDB dictionary for “Black Panther”, it would return 97. If there is no Rotten Tomatoes rating, return 0.
# function 5
def get_movie_rating (js) :
    source = js['Ratings']
    rating = 0 
    for dct in source:
        for k in dct:
            if dct[k] == 'Rotten Tomatoes':
                rating = int((dct['Value']).strip('%'))
    return rating

# Now, you’ll put it all together. Don’t forget to copy all of the functions that you have previously defined into this code window. 
# Define a function get_sorted_recommendations. It takes a list of movie titles as an input. 
# It returns a sorted list of related movie titles as output, up to five related movies for each input movie title. 
# The movies should be sorted in descending order by their Rotten Tomatoes rating, as returned by the get_movie_rating function. 
# Break ties in reverse alphabetic order, so that ‘Yahşi Batı’ comes before ‘Eyyvah Eyvah’.
# function 6
def get_sorted_recommendation (movie_titles) :
    related_titles = get_related_titles (movie_titles) #will give list
    ratings = [get_movie_rating (movie) for movie in related_titles] #will give list
    rated_movies = dict(zip(related_titles, ratings))
    sorted_rated_movies = sorted(rated_movies.keys(), key= lambda k : (rated_movies[k], k) ,reverse = True)
    return sorted_rated_movies
    
        
    
    
    
    
    

